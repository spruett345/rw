%header%

GRAMMARTYPE = "LL"

DESCRIPTION = "A grammar for the Rw language."

AUTHOR      = "Scott Pruett"
VERSION     = "1.0"
DATE        = "9 September, 2013"


%tokens%

PLUS = "+"
MINUS = "-"
STAR = "*"
SLASH = "/"
CARET = "^"

BACK_SLASH = "\"
LPAR = "("
RPAR = ")"
COMMA = ","
SEMICOLON = ";"

COLON = ":"

DEFEQ = ":="
YIELD = "->"

LET = "let "
IN = "in "
DEF = "def "
WHERE = "where "
IF = "if "
THEN = "then "
ELSE = "else "

AND = "and "
OR = "or "

GTE = ">="
LTE = "<="
EQ = "="
GT = ">"
LT = "<"

NUMBER = <<-?(\d+)>>
DECIMAL = <<-?(\d*)\.\d+>>
IDENTIFIER = <<[a-z_][a-zA-Z_?]*>>
WHITESPACE = <<[ \t\n\r]+>> %ignore%


%productions%

Program = (ComplexExpression | PatternDefinition)+;

PatternDefinition = DEF Expression [WHERE ComplexExpression] DEFEQ Expression;
ComplexExpression = Expression | LetExpression | IfExpression;

Expression = BooleanExpression;

LetExpression = LET IDENTIFIER EQ ComplexExpression (LetList)* IN ComplexExpression;
LetList = COMMA IDENTIFIER EQ ComplexExpression;

IfExpression = IF Expression THEN Expression ELSE Expression;

FunctionExpression = IDENTIFIER LPAR [ArgumentList] RPAR;
ArgumentList = Expression (COMMA Expression)*;

BooleanExpression = CompExpression [BooleanExpressionTail];
BooleanExpressionTail = AND BooleanExpression | OR BooleanExpression;

CompExpression = ArithExpression [CompExpressionTail];
CompExpressionTail = GTE CompExpression | LTE CompExpression | EQ CompExpression 
						| GT CompExpression | LT CompExpression;
						
ArithExpression = Term [ArithExpressionTail];
ArithExpressionTail = PLUS ArithExpression | MINUS ArithExpression;

Term = PowExpression [TermTail];
TermTail = STAR Term | SLASH Term;

PowExpression = Factor [PowTail];
PowTail = CARET PowExpression;

Factor = Atom | LPAR Expression RPAR | MINUS Expression | FunctionExpression | IDENTIFIER TypeTail;

Atom = NUMBER | DECIMAL | IDENTIFIER;
TypeTail = COLON IDENTIFIER [LPAR IDENTIFIER (COMMA IDENTIFIER)* RPAR];
